{
    "collab_server" : "",
    "contents" : "# source_all_rscreenorm_hn_lung.R\n\n# Data read in below has already been log2-transformed per well, but no normalization was used\n# Sanne Marten's data and Remco Magel's data, combining two experiments\nlibrary(rscreenorm)\nmydir <- \"/media/renee/Seagate Expansion Drive1/Projects/\"\ndata.read.hn <- read.screen.data(mydir = paste(mydir,\"HT screens Beusechem/Sanne Kemp/101111 Re-analyse screen/output\", sep=\"\"),\n                              filename = \"Cisplatin log2_raw_matrix_withAnn 6reps3treats .csv\", sep = \",\", ann_cols_names = NULL,\n                              n_ann_cols = 4, wtype_col = \"WellType\", wtype_lab = c(\"sample\", \"pos\", \"mock\"), use_plate = T,\n                              plate_var = \"Plate\")\nclass(data.read.hn) # \"isqn.object\"\nn.hn <- ncol(data.read.hn[[\"data_only\"]])\n\nmy.ids <- colnames(data.read.hn[[\"data_only\"]])\nmy_pdata.hn <- get.pdata(mydir = paste(mydir,\"HT screens Beusechem/Sanne Kemp/101111 Re-analyse screen/output\", sep=\"\"),\n                      filename = \"hnscc_pdata.txt\", names_var =\"Names\", clines_var = \"Cell line\",\n                      treat_var = \"Treat\", sample_ids = my.ids, sep=\",\")\n\ndata.read.ln <- read.screen.data(mydir = paste(mydir,\"HT screens Beusechem/Nagel2/output\", sep=\"\"),\n                              filename = \"lungScreen_data.txt\", sep = \"\\t\", ann_cols_names = NULL,\n                              n_ann_cols = 3, wtype_col = \"WellType\", wtype_lab = c(\"sample\", \"pos\", \"neg\"), use_plate = T,\n                              plate_var = \"Plate\")\nclass(data.read.hn) # \"isqn.object\"\nn.ln <- ncol(data.read.ln[[\"data_only\"]])\n\n# Check data read using csv input\ndata.read.csv <- read.screen.data(mydir = paste(mydir,\"HT screens Beusechem/Nagel2/output\", sep=\"\"),\n                              filename = \"lungScreen_data.csv\", sep = \",\", ann_cols_names = NULL,\n                              n_ann_cols = 3, wtype_col = \"WellType\", wtype_lab = c(\"sample\", \"pos\", \"neg\"), use_plate = F)\n\nmy.ids <- colnames(data.read.ln[[\"data_only\"]])\nmy_pdata.ln <- get.pdata(mydir = paste(mydir,\"HT screens Beusechem/Nagel2/output\", sep=\"\"),\n                      filename = \"lungScreen_pdata.txt\",names_var =\"Sample\", clines_var = \"Cell line\",\n                      treat_var = \"Treat\", sample_ids = my.ids, sep=\",\")\n\n# Combine screens\n# First create a list of isqn.object's\nl.isqn <- list(data.read.hn, data.read.ln)\n\nall.screens <- combine.screens(l.isqn)\n# Check that the combined data has a number of replicates equal\n# to the sum of the number of replicates of each individual experiment\nn.all <- ncol(all.screens[[\"data_only\"]])\nn.hn+n.ln == n.all  # TRUE\ndim(all.screens[[ \"data_ann\"]][[\"wtype_ann\"]]) == dim(all.screens[[\"data_only\"]])\nnrow(all.screens[[ \"data_ann\"]][[\"data_ann\"]]) == nrow(all.screens[[\"data_only\"]])\nlength(all.screens[[\"use_plate\"]]) == length(l.isqn)\nlength(all.screens[[\"use_plate\"]]) == length(unique(all.screens[[ \"data_ann\"]][[\"screen\"]]))\n\n# Combine pdata objects\nl.pdata <- list(my_pdata.hn, my_pdata.ln)\nall.pdata <- combine.pdata(l.pdata)\nnrow(all.pdata[[\"pdata\"]]) == n.all\nall( colnames(all.screens[[\"data_only\"]]) == all.pdata[[\"pdata\"]][, \"names\"])\n\n#lscores.rep <- get.leth.scores(data.read, robust = TRUE)\nlscores.plt <- get.leth.scores(all.screens, robust = TRUE)\nmy.inv.set <- get.inv.set(lscores.plt, my_gamma = 1, var_type = \"mad\",  prop = 0.95, set_shape = \"left\")\np.inv.set <- get.inv.set(lscores.plt, var_type = \"mad\",  prop = 0.95, set_shape = \"left\")\ncolMeans(my.inv.set, na.rm=T)\ncolMeans(p.inv.set, na.rm=T)\nmyth1 <- get.th.inv.set(lscores.plt, my_gamma = 1, set_shape=\"left\")\nmyth2 <- get.th.inv.set(lscores.plt, prop=0.95, set_shape=\"left\")\npar(mfrow=c(1,2), las=2)\nget.inv.set.prop(lscores.plt, myth1, plot=T)\nget.inv.set.prop(lscores.plt, myth2, plot=T)\n\nnorm.data <- get.qnorm(data_isqn = lscores.plt, inv_set = p.inv.set)\n\n## computing it all in one go - from lethality scores to normalized data\nnorm.data2 <- get.isqnorm(data_isqn = lscores.plt, var_type = \"mad\",\n                        prop = 0.95, set_shape = \"left\")\n\n## Graphs: density plots for data from a single screen\n# Raw, log2-data\ndo <- data.read.ln[[\"data_only\"]]\nda <- data.read.ln[[\"data_ann\"]]\nxi <- 1\nplot( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"black\", main=paste(colnames(do)[xi]),\n      xlim = range(do[, xi], na.rm=T))\nlines( density(do[da[, \"wtype\"] == \"neg\", xi], na.rm=T), col=\"blue\")\nlines( density(do[da[, \"wtype\"] == \"pos\", xi], na.rm=T), col=\"red\" )\nlegend(\"topleft\", legend=c(\"sample\", \"neg\", \"pos\"), lty=\"solid\",\n       col=c(\"black\", \"blue\", \"red\"))\n# Lethality scores\nlscores.plt <- get.leth.scores(data.read.ln, robust = TRUE)\ndo <- lscores.plt[[\"data_only\"]]\nda <- lscores.plt[[\"data_ann\"]]\nxi <- 1\nplot( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"black\", main=paste(colnames(do)[xi]),\n      xlim = range(do[, xi], na.rm=T))\nlines( density(do[da[, \"wtype\"] == \"neg\", xi], na.rm=T), col=\"blue\")\nlines( density(do[da[, \"wtype\"] == \"pos\", xi], na.rm=T), col=\"red\" )\nlegend(\"topright\", legend=c(\"sample\", \"neg\", \"pos\"), lty=\"solid\",\n       col=c(\"black\", \"blue\", \"red\"))\n# Qnorm data\np.inv.set <- get.inv.set(lscores.plt, var_type = \"mad\",  prop = 0.95, set_shape = \"left\")\nnorm.data <- get.qnorm(data_isqn = lscores.plt, inv_set = p.inv.set)\ndo <- norm.data[[\"data_only\"]]\nda <- norm.data[[\"data_ann\"]]\nxi <- 1\nplot( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"black\", main=paste(colnames(do)[xi]),\n      xlim = range(do[, xi], na.rm=T))\nlines( density(do[da[, \"wtype\"] == \"neg\", xi], na.rm=T), col=\"blue\")\nlines( density(do[da[, \"wtype\"] == \"pos\", xi], na.rm=T), col=\"red\" )\nlegend(\"topright\", legend=c(\"sample\", \"neg\", \"pos\"), lty=\"solid\",\n       col=c(\"black\", \"blue\", \"red\"))\n# Plot of densities for all samples\n# leth scores and qnorm\npar(mfrow = c(1, 2))\nxi <- 1\ndo <- lscores.plt[[\"data_only\"]]\nda <- lscores.plt[[\"data_ann\"]]\nplot( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"blue\", main=\"Leth scores\",\n      xlim = range(do[, xi], na.rm=T), xlab = \"\")\nfor(xi in 2:ncol(do)) lines( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"blue\")\n\ndo <- norm.data[[\"data_only\"]]\nda <- norm.data[[\"data_ann\"]]\nxi <- 1\nplot( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"blue\", main=\"isqn norm\",\n      xlim = range(do[, xi], na.rm=T), xlab = \"\")\nfor(xi in 2:ncol(do)) lines( density(do[da[, \"wtype\"] == \"sample\", xi], na.rm=T), col=\"blue\")\n\n\n## Graphs: density plots for data from a single screen\n# Lethality scores\nlscores.plt <- get.leth.scores(all.screens, robust = TRUE)\ndo <- lscores.plt[[\"data_only\"]]\nda <- lscores.plt[[\"data_ann\"]]\nnorm.data2 <- get.isqnorm(data_isqn = lscores.plt, var_type = \"mad\",\n                          prop = 0.95, set_shape = \"left\")\n# Plot of densities for all samples\n# leth scores and qnorm\npar(mfrow = c(1, 2), mar=c(4,3,4,.5))\nxi <- 1\ndo <- lscores.plt[[\"data_only\"]]\nda <- lscores.plt[[\"data_ann\"]][[\"wtype_ann\"]][, 1]\nplot( density(do[da == \"sample\", xi], na.rm=T), col=\"blue\", main=\"Leth scores\",\n      xlim = c(-1, 5), xlab = \"\", ylab=\"\")\nfor(xi in 2:ncol(do)) lines( density(do[da == \"sample\", xi], na.rm=T), col=\"blue\")\n\ndo <- norm.data2[[\"data_only\"]]\nda <- norm.data2[[\"data_ann\"]][[\"wtype_ann\"]][, 1]\nxi <- 1\nplot( density(do[da == \"sample\", xi], na.rm=T), col=\"blue\", main=\"isqn norm\",\n      xlim = c(-1, 5), xlab = \"\", ylab=\"\")\nfor(xi in 2:ncol(do)) lines( density(do[da == \"sample\", xi], na.rm=T), col=\"blue\")\n\n\n",
    "created" : 1510131879398.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "796575770",
    "id" : "2BD90E8",
    "lastKnownWriteTime" : 1509543255,
    "last_content_update" : 1509543255,
    "path" : "/media/renee/Seagate Expansion Drive1/Projects/bachas costa/files for tests examples rscreenorm/source_all_rscreenorm_hn_lung.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}