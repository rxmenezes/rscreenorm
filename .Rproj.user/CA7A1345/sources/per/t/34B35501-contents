---
title: "rscreenorm: scaling and normalization of genetic screen data"
author: "Renee X. de Menezes and Costa Bachas"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{rscreenorm}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r resume}
## Resume from Mulder example starting l 417, see l 6683
```

## Normalization of a single arrayed screen

Our first example consists of normalizing simulated data. In this case, the setup is controlled, including assay controls, and we know which effects are to be corrected for.

The experiment involves 3 cell lines, each observed in two conditions (without and with treatment), and for each condition the cell line is screened multiple times. We assume that the genetic screen used is pooled, so all measurements are obtained at once.


```{r simul.origin, echo=FALSE}
### Code chunks in this section come from main_simulation_smallPi0_final2.R in the simulation folder
```

### Data simulation

Let us define the setup used here, which is the same as the one used in the article where rscreenorm is proposed.

```{r simul.defineSetup}
set.seed <- 12345 # 76543
n.clines <- 6     # number of cell lines
nlibrary <- 1000  # number of siRNAs in the library
n.cont <- 200     # number of controls - of negative and positive controls, each
n.reps <- 3        # Number of replicates per cell line (a single condition per cell line)
# Starting parameters of control distributions
mu.neg <- 0
mu.pos <- 1
sd.neg <- 0.1
sd.pos <- sd.neg
```


Specifically, we assume that `r n.clines/2` cell lines are studied, each screened `r n.reps` times. Each cell line is studied once in each condition, namely treatment and control. Each screen involves `r n.library` library siRNAs and `r n.cont` negative and positive controls. 


```{r simul.defs, echo=FALSE}
# Strecht values from main_simulation_smallPi0_final_controls.R
```

We simulate values such that those around 0 yield a similar phenotype as the negative controls, and those around 1 yield a similar phenotypes to the positive controls. As such, we can assume that read-out values are between 0 and 1. Based on this, we assume that library features follow a Beta distribution with parameters $\alpha, \beta$, where $\beta$ is the scale parameter, and the mean is equal to $\alpha/(\alpha + \beta)$. For pairs of values satisfying $\beta > \alpha > 1$, the resulting mean lies between 0 and 0.5. We will use $\alpha=2, \beta=6$, which yields a Beta distribution with mean $2/8=0.25$. 

Distributions of read-out values may vary per replicate not only with respect to their centers, but also with respect to their dispersion. Here we include a stretching effect of the distributions, which means that cell lines have increasing variability from 1 to 3. We also assume that the stretch effect is the same for both conditions, so no confounding between the technical stretch effect and the condition effect takes place. The stretch effect in essence changes the functional range of replicates.


```{r simul.defineParameters}
par.mat <- c(2, 6)
stretch <- rep( rep(c(0.6, 1, 1.5),2), each=n.reps) 
stretch <- stretch + rnorm(length(stretch), mean=0, sd=0.05)
mu.pos <- mu.pos*stretch
pi0 <- 0.8  # prop features with the same mean for all cell lines
```

We assume also that a proportion `r round(pi0, 1)` of all siRNAs do not display differential phenotype between the two conditions. Subsequently, we build the matrix with the expected value of the Beta distribution corresponding to each library siRNA and each cell line. Per siRNA, those with differential phenotype are assumed to have a mean of 0.5, therefore displaying a relatively subtle loss of cell viability.

```{r simul.SetMeans}
# Set means
meanv <- rbeta(nlibrary, shape1=par.mat[1], shape2=par.mat[2]) # means for null features, to be used for all replicates
mean.eff <- rep(0.5, ceiling((1-pi0)*nlibrary)) 
all.means1 <- matrix( rep(meanv, n.reps*n.clines/2), nrow=nlibrary, ncol=n.reps*n.clines/2 )
all.means2 <- rbind( all.means1[ 1:(nlibrary*pi0), ] , 
                     matrix(mean.eff, nrow=ceiling((1-pi0)*nlibrary), ncol=n.reps*n.clines/2 ) )
all.means <- cbind(all.means1, all.means2)
```

Using the matrix of expected values, the data can be generated. We will draw observations for each library siRNA from a normal distribution with mean in the corresponding entry of the expected values matrix, and standard deviation `r round(2*sd.neg, 1)`. Negative controls are also drawn from a normal distribution, with mean `r round(mu.neg, 1)` and standard deviation `r round(sd.neg, 1)`. Positive controls are too drawn from a normal distribution with the same standard deviation  `r round(sd.neg, 1)`, with mean 1  times the stretch.


```{r simul.generateData}
data.mat <- matrix(0, nrow=nlibrary+2*n.cont, ncol=n.clines*n.reps) 
wt <- c(rep("sample", nlibrary), rep(c("neg","pos"), each=n.cont))

for(xi in 1:(n.clines*n.reps))
{
  if(is.null(dim(all.means))) {  
  data.mat[,xi] <- c(rnorm(nlibrary, mean=all.means, sd=2*sd.neg)*stretch[xi],
                     rnorm(n.cont, mean=mu.neg, sd=sd.neg),
                     rnorm(n.cont, mean=mu.pos[xi], sd=sd.pos))
  } else {
    data.mat[,xi] <- c(rnorm(nlibrary, mean=all.means[,xi], sd=2*sd.neg)*stretch[xi],
                       rnorm(n.cont, mean=mu.neg, sd=sd.neg),
                       rnorm(n.cont, mean=mu.pos[xi], sd=sd.pos))
  }
}
```

We also define labels to represent the different combinations of cell lines and conditions. 


```{r simul.clines.labels}
cline.vec <- rep(1:n.clines, each=n.reps)
cl.reps <- paste( rep(paste("CL",1:n.clines,sep=""),each=n.reps),rep(paste("R",1:n.reps,sep=""), n.clines)  )
myp <- rep(c(rep(0.95,3),rep(0.70,3)),each=3)  # proportion of features to include in the invariant set
colnames(data.mat) <- cl.reps
```


We now create annotation columns such as gene ID and well type. Subsequently, we make an object of class 'isqn.object' in the format expected by the package for normalization. Specifically, the column containing the well type must be called 'wtype', and labels for library siRNAs, negative and positive controls must be 'sample', 'neg' and 'pos', respectively. The isqn.object  must be a list, containing also slots: `use_plate' indicating whether the screens are pooled (FALSE) or arrayed (TRUE); 'hasWtype', indicating whether a well type variable exists (TRUE) or not (FALSE).

```{r simul.annot}
wtype <- factor(c(rep("sample", nlibrary), rep("neg", n.cont), rep("pos", n.cont)))
data.ann <- data.frame(geneID = paste("Gene", 1:nrow(data.mat), sep=""), 
                       wtype = wtype )  
data.screen <- list(data_ann = data.ann, data_only = data.mat, use_plate = FALSE, hasWtype = TRUE)
class(data.screen) <- "isqn.object"
```


In this example we create this special object because the data is already in R. In the next examples we will see also how to read data into the package from tab-delimited files.

```{r simul.saveObjects, eval=FALSE, echo=FALSE}
save(data.screen, file="data_screen.RData")
data.screen.ann <- data.frame(data.ann, data.mat)
save(data.screen.ann, data.ann, file="data_screen2.RData")
```

Finally, we create a phenotypic data object called 'pdata', containing the variables of interest, such as cell line and replicate number. It also includes a vector of colours to be used in plots.

```{r simul.pdata}
f.cl <- factor(paste( rep(paste("CL",1:n.clines,sep=""),each=n.reps) ))
# Colours to be used for graphs, one corresponding to each cell line
vcols <- c("blue","darkblue","darkolivegreen4","red","deeppink4","violet")
col.cl <- rep(vcols,each=n.reps)
names(col.cl) <- as.character(f.cl)

pdata <- data.frame(names = cl.reps, clines = f.cl, treat = rep(0:1, each=n.reps))
pdata$cols_vec = var.in.colour(pdata$clines)[[1]]
pdata <- list(pdata = pdata, cols_list = unique(pdata$cols_vec), list_vars = colnames(pdata))
```

In later examples we will see a function of the package that reads in tab-delimited files containing phenotypic data frames and formats them in the expected format.

### Explore the data 

The generated data can be explored via various plots. We will here make boxplots per cell line, replicate and well type.



```{r simul.boxplots.rawData, fig.width=12, fig.height=4}
par(las=2, mar=c(7.5,5,5,1))
  mydata <- matrix(data.screen[["data_only"]], 
         nrow= nrow(data.screen[["data_only"]])*ncol(data.screen[["data_only"]]),
         ncol=1)[, 1]
  wtype.vec <- rep(data.screen[["data_ann"]][, "wtype"], ncol(data.screen[["data_only"]]) )
  cline.vec <- rep(pdata[["pdata"]][, "names"], 
                   each=nrow(data.screen[["data_only"]]))
  all.cols <- rep(pdata[["pdata"]][, "cols_vec"], 
                  each=nlevels(data.screen[["data_ann"]][, "wtype"]))
  boxplot(mydata ~ wtype.vec + cline.vec, col = all.cols, pch=20, cex=.7,
          main = "Raw data per replicate and well type",
          cex.axis = 0.7)
```

The boxplots make clear that the functional ranges of the cell line-speficic screens vary, as the distance between negative and positive controls change. In addition, the variability of cell line-speficic screens also varies.


### Normalization across replicates

The data generated is on the scale of lethality scores, but functonal ranges are different. We can now compute lethality scores:

```{r simul.get.leth.scores, fig.width=12, fig.height=4}
lscores <- get.leth.scores(data.screen)
par(las=2, mar=c(7.5,5,5,1))
  mydata <- matrix(lscores[["data_only"]], 
         nrow= nrow(data.screen[["data_only"]])*ncol(data.screen[["data_only"]]),
         ncol=1)[, 1]
 boxplot(mydata ~ wtype.vec + cline.vec, col = all.cols, pch=20, cex=.7,
         main = "Lethality scores per replicate and well type",
         cex.axis = 0.7)
```

Boxplots of the lethality scores make clear that functional ranges are now comparable. Lethality scores essentially both center and scale the data, taking controls into account. They are computed per replicate independently of all others, using only the replicate-specific assay controls. 

Data can now be normalized using rscreenorm. This will use the lethality scores as input and, taking the middle point between negative and positive control means, will first choose library features (so excluding controls) to compose the invariant set of values, which is expected to yield the same distribution across replicates. Note that the invariant set is constructed based per replicate on the measured values, ignoring the identities of the corresponding features, independently of all other replicates. 


```{r get.inv.set}
inv.set <- get.inv.set(lscores, my_gamma = 1, set_shape = "left", var_type = "mad")
```

We can check now the replicate-specific proportions of values included in the invariant set. This helps us understand if some replicates have an under- or over-representation of library features in their corresponding sets. For this, we need to extract an intermediate result, the thresholds used to define the replicate-specific invariant sets:

```{r plot.prop.inv, fig.width=10, fig.height=6}
par(las = 2)
thres <- get.th.inv.set(lscores, my_gamma = 1, var_type = "mad") 
myprops <- get.inv.set.prop(lscores, thres, plot = TRUE, cols_list = pdata[["pdata"]][, "cols_vec"])
```

Proportions of scores included in the invariant set display acceptable variability in the range `r round(range(myprops), 2)`.

The final step is to compute the quantile-normalized values for scores in the invariant sets, then apply an equivalent correction to all scores, per replicate:

```{r simul.get.qnorm,  fig.width=12, fig.height=4}
qnorm.scores <- get.qnorm(lscores, inv.set)
par(las=2, mar=c(7.5,5,5,1))
  mydata <- matrix(qnorm.scores[["data_only"]], 
         nrow= nrow(data.screen[["data_only"]])*ncol(data.screen[["data_only"]]),
         ncol=1)[, 1]
 boxplot(mydata ~ wtype.vec + cline.vec, col = all.cols, pch=20, cex=.7,
         main = "Rscreenorm scores per replicate and well type",
         cex.axis = 0.7)
```

The function 'get.isqnorm' is a wrapper which composes the invariant set and normalizes the data. 

```{r .simul.rscreenorm.wrapper}
norm.scores <- get.isqnorm(lscores, my_gamma = 1, var_type = "mad", set_shape = "left")
```

Another good way of visualizing results for all replicates simultaneously is to display density plots of library siRNAs (labelled 'sample' in the annotation data). We will do this using the function 'pdw' that plots densities per well type.  

```{r simul.rscreenorm.densplots, fig.width=12, fig.height=6}
par(mfrow = c(1, 2))
pdw(data.screen, wtype = "sample", mytitle = "Raw data")
pdw(norm.scores, wtype = "sample", mytitle = "Rscreenorm scores")
```



## Normalization of a single pooled screen

The data we will use for this example was first made public via the article Hart et al. (Mol Sys Biol, 2014).

First download the data to a local folder. While the data can in principle be read in directly into R via a URL, this fails in some systems due to security constraints. The data can be found in the URL:

http://tko.ccbr.utoronto.ca/

from which you should download files "readcount-HCT116_1-lib1.gz" and "readcount-RPE1-lib1.gz".

The corresponding annotation table should also be downloaded, in this case from:

www.cell.com/cms/attachment/2112967508/2084194890/mmc2.xlsx

After downloading, this file was saved as tab-delimited with name 'annotation_mmc2.txt'.

### Reading in the data

From the local folder, we read in the data for each screen using:

```{r read.data.cris}
mydir <- file.path(getwd(), "vignettes")
vcl <- c("HCT116_1", "RPE1")
filesToRead <- paste("readcount-", vcl, "-lib1.gz", sep="")
scr1 <- read.screen.data(mydir = mydir, filename = filesToRead[1],
                         n_ann_cols = 2, use_plate = FALSE )
scr2 <- read.screen.data(mydir = mydir, filename = filesToRead[2],
                         n_ann_cols = 2, use_plate = FALSE )
```

The above gives warnings that no column is available with well type information. Indeed, such information is not available from the annotation columns in the data. 
The downloaded annotation table can be read in via:

```{r read.ann.cris}
data.ann.all <- read.delim(file.path(mydir, "annotation_mmc2.txt"), stringsAsFactors=FALSE)
wellType <- rep("sample",nrow(data.ann.all))
tab.target <- table(data.ann.all$Target)
cont.names <- names(tab.target[tab.target>10])
wellType[data.ann.all$Target %in% cont.names[3:5]] <- "neg"
wellType[data.ann.all$Target == "chr10Promiscuous"] <- "pos"
```

The screen data read in and the annotation file are not in the same order. To get them in the correct order, we need to order both datasets by the guide RNA sequence, contained in column 'GENE_CLONE' of the 'data_ann' slot of the screen data, and in the 'gRNA.Sequence' column of the annotation data.

```{r order.data}
ann.grna <- as.character(data.ann.all$gRNA.Sequence)
ann.screen <- sapply(1:nrow(scr1[["data_ann"]]), mysplit, 
                     char.vector = as.character(scr1[["data_ann"]]$GENE_CLONE),
                     split.by = "_", result.sel = 2)
mat.ann <- scr1[["data_ann"]][order(ann.screen), ]
mat.ann$gRNA <- ann.screen[order(ann.screen)]

scr1[["data_only"]] <- scr1[["data_only"]][order(ann.screen), ]
scr2[["data_only"]] <- scr2[["data_only"]][order(ann.screen), ]
scr1[["data_ann"]] <- scr2[["data_ann"]] <- mat.ann
```

Using the information in the file and in the published article, we have also already created a variable indicating the well type.
Now we add this variable to the 'data_ann' slots of both screens:

```{r wtype.ann.cris}
scr1[["data_ann"]]$wtype <- scr2[["data_ann"]]$wtype <- wellType
```

The screen replicate labels are not  very informative:

```{r labels.cris}
colnames(scr1[["data_only"]])
colnames(scr2[["data_only"]])
```

Per cell line, we extract time points and the label 'A, B', then combine this information into a pheno data object. We also add the cell line name to the column names, so as to enable combining the two data sets without mixing up labels.
Extract time points, A and B. Then paste cell line names. These form the new colnames.

```{r newColNames}
scr1.t <- sapply(1:nc.screen(scr1), mysplit, char.vector = colnames(scr1[["data_only"]]), 
                 split.by = "_", result.sel = 2)
scr1.lab <- sapply(1:nc.screen(scr1), mysplit, char.vector = colnames(scr1[["data_only"]]), 
                 split.by = "_", result.sel = 3)
colnames.new <- paste(vcl[1], scr1.t, c(scr1.lab[-length(scr1.lab)], ""), sep = ".")
pdata1 <- data.frame(names = colnames.new, clines = rep(vcl[1], length(scr1.t)), treat = scr1.t, cols_vec =rep("blue", nrow(pdata1)))
colnames(scr1[["data_only"]]) <- colnames.new
pd1 <- list(pdata = pdata1, cols_list = "blue", list_vars =colnames(pdata1))
#
scr2.t <- c(colnames(scr2[["data_only"]])[1], 
            substr(colnames(scr2[["data_only"]])[-1], start=1, stop=nchar(colnames(scr2[["data_only"]])[-1])-1 ) )
scr2.lab <- c("", substr(colnames(scr2[["data_only"]])[-1], start=nchar(colnames(scr2[["data_only"]])[-1]),
                          stop=nchar(colnames(scr2[["data_only"]])[-1])) )
colnames.new <- paste(vcl[2], scr2.t, scr2.lab, sep = ".")
pdata2 <- data.frame(names = colnames.new, clines = rep(vcl[2], length(scr2.t)), treat = scr2.t, cols_vec =rep("red", nrow(pdata1)))
colnames(scr2[["data_only"]]) <- colnames.new
pd2 <- list(pdata = pdata2, cols_list = "red", list_vars =colnames(pdata2))
```

Note that each pdata is a list involving a data.frame called 'pdata' and two character vectors, 'cols_list' and 'list_vars', containing the list of colours corresponding to the replicates in the corresponding data and the column names of 'pdata', respectively.

Subsequently, we will combine the two screen objects into a single one, and the two pdata objects into a single one:

```{r combine.screens.cris}
scr.data <- combine.screens(list(scr1, scr2))
pdata <- combine.pdata(list(pd1, pd2))
col.cl <- pdata[["pdata"]]$cols_vec
names(col.cl) <- as.character(pdata[["pdata"]]$clines)
```




```{r extraPdataNoLongerNeeded, eval=F, echo=F}
# from analysis_tko_overview.Rmd
all.sample.names <- colnames(scr.data[["data_only"]])
sample.ids <- sapply(1:length(all.sample.names),mysplit,char.vector=all.sample.names,split.by="[.]",result.sel = 1)
time <- sapply(1:length(all.sample.names),mysplit,char.vector=all.sample.names,split.by="[.]",result.sel = 2)
# This didn't work as it should have for the first 4 entries - so we fix those
time[1:4] <- c(paste("R",1:3,sep=""),"T0")
sample.ids[1:4] <- rep("DLD",4)
# time did not work for entires 12:23, so we fix this too
t12.22 <- time[12:22]
t1 <- sapply(1:length(t12.22),mysplit,char.vector=t12.22,split.by="_",result.sel=2)
t2 <- sapply(1:length(t12.22),mysplit,char.vector=t12.22,split.by="_",result.sel=3)
t2[length(t2)] <- ""
time[12:22] <- paste(t1,t2,sep="")
# Time includes the actual time label as well as a letter, possibly referring to a replicate
pdata <- data.frame(names=all.sample.names,ids=sample.ids,treat=time)

```

### Explore the data 

We start by making plots of the data as read in. We choose to display density plots of library guide RNAs, negative and positive controls per replicate. For this, we use the function 'pdmw' that plots densities of multiple well types.

```{r densityPlotsWithControls.cripsr, fig.width=12, fig.height=4}
par(mfrow=c(1,3), mar=c(4,3,1,1))
pdmw(scr.data, pdata, use.cont = c("sample", "pos", "neg"), na.rm = TRUE,
                 plot = TRUE, rescale = TRUE, myxlab = "asinh values",
                 mytitle = FALSE, add.text = TRUE, add.leg = TRUE)
```

One important feature highlighted in the graphs above is that positive controls used do not all lead to cell depletion, what is clear from their bimodal distribution for each of the replicates. Rscreenorm works best with positive controls that reliably lead to the desired phenotype. For this reason, we will select a subset of these positive controls that consistently lead to cell depletion. 

From the graphs above, the positive controls densities are bimodal, with the separation between the two components being around values 4 and 2 (on the hyperbolic-arc sine scale) for the HCT116 and RPE1 cell lines, respectively. We will therefore use as positive  controls for normalization with rscreenorm those that most often yield phenotype in the left-most component.

We now compute the number of times each guide RNA labelled as positive control yield phenotype in the lower component:

```{r count.leth.posControls}
mycut <- rep(4, nc.screen(scr.data))
mycut[ pdata[["pdata"]]$names == "RPE1" ] <- 2
pos.0 <- NULL
for(xi in 1:nc.screen(scr.data))
   pos.0 <- cbind(pos.0, scr.data[["data_only"]][ scr.data[["data_ann"]][["wtype_ann"]][, xi] == "pos", xi] <= mycut[xi])
rownames(pos.0) <- scr.data[["data_ann"]][["data_ann"]][ scr.data[["data_ann"]][["wtype_ann"]][, 1] == "pos", "gRNA"]
n.0s <- apply(pos.0, 1, sum)
table(n.0s)
```

So, a total of `r sum(table(n.0s)[19:21])` guide RNAs will be used by rscreenorm as positive controls. We now update the annotation.

```{r cris.newposcont}
oldPos <- rownames(pos.0)[n.0s < 18]
wtype.new <- scr.data[["data_ann"]][["wtype_ann"]]
wtype.new[ scr.data[["data_ann"]][["data_ann"]]$gRNA %in% oldPos, ] <- "random"
scr.data[["data_ann"]][["wtype_ann"]] <- wtype.new
```

### Normalization using wrapper

We now compute lethality scores, and use the wrapper function to normalize all screens.


```{r cris.rscreenorm.wrapper}
lscores <- get.leth.scores(scr.data, rescale = TRUE)
norm.scores <- get.isqnorm(lscores, prop = 0.95, var_type = "mad", set_shape = "left")
```

The lethality scores and normalized scores for all replicates can be seen in the graphs below. It is clear that some variability between replicates remains after computing lethality scores, and that is corrected for by rscreenorm. Importantly, since rscreenorm only uses part of the lethality scores for the normalization, the cell depletion effects on the upper tail are preserved.

```{r cris.rscreenorm.densplots, fig.width=12, fig.height=6}
par(mfrow = c(1, 2))
pdw(lscores, wtype = "sample", mytitle = "Lethality scores")
pdw(norm.scores, wtype = "sample", mytitle = "Rscreenorm scores")
```




## When no negative controls are available



We use the data from Mulder *et al.* (*Nature Cell Biology*, 2012)

https://www.nature.com/articles/ncb2520#methods

which is available via the Bioconductor data package ``Mulder2012''. It can be installed using: 

```{r install.libraries, eval=FALSE}
source("http://bioconductor.org/biocLite.R")
# Before installation, run on terminal:
# sudo apt-get install libmpfr-dev -y
biocLite("Mulder2012")
biocLite("Rmpfr")
```

Once the library is loaded, the raw data can be assessed as indicated below, where we create shorter names for the data and annotation objects for convenience.


```{r muld.load.data}
library(Mulder2012)
library(gplots)
# Raw data
data(Mulder2012.rawScreenData)
mrd.all <- rawScreenData
# Annotation
data(Mulder2012.rawScreenAnnotation)
mann <- rawScreenAnnotation
```



The data object contains `r nrow(mrd.all)` rows and includes annotation as well as data columns:

```{r muld.cols.data}
colnames(mrd.all)
```

The "CHANNEL" column indicates whether channel 700 or 800 was used. Here we will use data for channel 700, which should not involve the TG1 phenotype.  The number of rows in the data using values for a single channel is reduced to `r nrow(mrd.all)/2`.

```{r def.muld.dataPerchannel}
mrd <- mrd.all[mrd.all$CHANNEL == "700", ] # Check if this is the channel to be used
#colnames(mrd)[ 4:ncol(mrd) ] <- paste(colnames(mrd)[ 4:ncol(mrd1) ], 700, sep="_")
```

The annotation object contains `r nrow(mann)` rows and includes gene annotation:

```{r muld.cols.ann}
colnames(mann)
```


The screen involves 4 plates, as we can see below, and each condition is observed in triplicate.

```{r muld.check.plates.reps}
table(mrd$PLATE)
```

Positive controls for the *TG1* phenotype are labelled as "control" in the annotation file, column "ACC.NUMB". They correspond to symbols *TG1 A* and *TG1 B*, as we can see below. Each of these siRNAs are spotted once per plate, so a total of  `r sum(mann$ACC.NUMB == "control")` controls are available, per replicate.

```{r muld.check.controls, eval=FALSE, echo=FALSE}
table(mann$ACC.NUMB)[table(mann$ACC.NUMB)>1] # looking for repeated ids, corresponding to controls
#  control NM_018313
#       8         2
# So 8 controls, 2 per plate
# Note: annotation has 340 rows, whilst data has 680. So stack annotation to produce what is expected
#mys <- sort(as.character(mann$SYMBOL))
#mys
table(as.character(mann$SYMBOL)[mann$ACC.NUMB=="control"])
#siTG1 A siTG1 B
#      4       4
```


```{r muld.poscontrols}
table(as.character(mann$SYMBOL)[mann$ACC.NUMB=="control"], mann$PLATE[mann$ACC.NUMB=="control"])
```

Note that, since the channel 700 data corresponds to the screens without the *TG1* phenotype, the controls above are not expected to display the cell viability loss phenotype. However, we expect them to yield a comparable phenotype across plates and replicates.

We now create the screen data object, with format as expected by the rscreenorm package.

```{r simul.annot}
wtype <- rep("sample", nrow(mrd))
wtype[mann$ACC.NUMB == "control"] <- rep("pos", sum(mann$ACC.NUMB == "control"))
data.ann <- data.frame(geneID = as.character(mann$SYMBOL), 
                       accnum = mann$ACC.NUMB,
                       wtype = wtype,
                       plate = mann$PLATE)  
data.screen <- list(data_ann = data.ann, data_only = as.matrix(mrd[, -(1:3)]), 
                    use_plate = TRUE, hasWtype = TRUE)
class(data.screen) <- "isqn.object"
```


We also make  a pdata object with the conditions and replicates known, corresponding to single-channel data. The column names of the data columns are used to connect it to the pdata object. The resulting pdata object consists of:

```{r muld.def.pdata}
treat <- colnames(mrd)[seq(from=4, by=3, length.out=5)] 
treat <- substr(treat, start=1, stop=nchar(treat)-2)
pdata <- data.frame( names = colnames(mrd)[-(1:3)],
                     treat = rep(treat, each=3),
                     replicate = rep(1:3, 5),
                     cols_vec = var.in.colour(rep(treat, each=3))[[1]])
pdata <- list(pdata = pdata, 
              cols_list = unique(pdata$cols_vec), 
              list_vars = colnames(pdata))
```


### Exploring the data

Density plots of the raw data look as follows, grouped per condition:

```{r muld.plot.dens.rawData, fig.width=10, fig.height=8}
pdw(data.screen, wtype = "sample", mytitle = "Raw data")
```


The data above displays some asymmetry, so we transform the data using a hyperbolic-arc sine to see if we get more symmetric per-replicate data distributions. To this plot, we add the positive controls.


```{r muld.plot.dens.log2Data, fig.width=12, fig.height=8}
vcols <- var.in.colour(pdata[["pdata"]]$treat)[[2]]
names(vcols) <- var.in.colour(pdata[["pdata"]]$treat)[[3]]
par(mfrow=c(2, 3))
for(xi in levels(pdata[["pdata"]]$treat))
{ 
 pdw(data.screen, 
     sel.reps = pdata[["pdata"]]$names[ pdata[["pdata"]]$treat ==xi ], wtype = "sample", 
     mycols = rep(vcols[xi], sum(pdata[["pdata"]]$treat ==xi)),
     mytitle = "Raw data", rescale = TRUE)
  mypch <- 1:2
  mcont <- asinh(data.screen[["data_only"]][data.screen[["data_ann"]]$accnum =="control", pdata[["pdata"]]$treat == xi])
  mcann <- data.screen[["data_ann"]][data.screen[["data_ann"]]$accnum =="control", ]
  xk <- 1
  for(xi in unique(as.character(mcann$geneID)))
  { 
    points(as.matrix(mcont[mcann$geneID==xi, ]), rep(0, ncol(mcont) * nrow(mcont)/2), 
           pch = mypch[xk], col="red", cex=2)
    xk <- xk+1
  }
  legend("topleft", 
         legend=unique( data.screen[["data_ann"]]$geneID[data.screen[["data_ann"]]$accnum =="control"] ), 
         pch=1:2, col="red", cex=.8)

}
```



As we indeed get more symmetric distributions, we use the rescaled data from now on. Note that the *TG1* controls yield measurements in the entire functional range. This was expected since, this being the control condition (channel 700), *TG1* should not yield a lethal phenotype.


Boxplots of the rescalded raw data separately for each replicate and according to plate suggests at least a plate effect, with some plates consistently yielding more variability (such as plate 4) and/or different levels, certainly for some conditions:

```{r muld.boxplots.rescaledrawdata, fig.width=12, fig.height=4}
myylim <- range(asinh(data.screen[["data_only"]]))
par(mfrow=c(1, 3))
for(xj in 1:nc.screen(data.screen))
{  
    boxplot(asinh(data.screen[["data_only"]])[, xj] ~ 
              factor(data.screen[["data_ann"]]$plate),
            main=paste(colnames(data.screen[["data_only"]])[xj]),
            col=pdata$pdata$cols_vec[xj], ylim=myylim )
  mcont <- asinh(data.screen[["data_only"]][data.screen[["data_ann"]]$accnum =="control", xj])
  mcann <- data.screen[["data_ann"]][data.screen[["data_ann"]]$accnum =="control", ]
    xk <- 1
    for(xi in unique(as.character(mcann$geneID)))
    { 
      points(mcann$plate[mcann$geneID==xi], mcont[mcann$geneID==xi],  
             pch = mypch[xk], col="black", cex=2)
      xk <- xk+1
  }
}
```

In the above, values for the same *TG1* controls are displayed, now per plate. Here it is again clear that these siRNAs cannot represent positive controls for this condition, as they do not yield  a lethal phenotype consistently.

We also see that replicates of condition "AG148+BMP2/7" display less variability than others. 

The above graphs highlight plate and replicate as sources of variation, but there are also clear diffferences between conditions. However, we lack reliable controls. Next, we will look for siRNAs that can represent references for the functional range.


### Absence of pair of assay controls

The *TG1* assay controls consistently yield values within the box for that plate and replicate, so they seem to yield phenotypes that are similar to the middle 50% of the siRNAs, except perhaps for some variability between replicates of the same condition. This means in particular that we can assume phenotypes yielded per plate could be centered around the same value, for example the one given by the average of the two *TG1* assay controls. 

The only exception for the assay controls appearing in the the middle of the data points is for plate 2 of all "vehicle" replicates, where they are consistenly lower. Given the reproducibility of this trend across the triplicates and the lack of other siRNAs that could yield another reference value, we will center these plates using their *TG1* assay controls as all others.

However, these are not enough to yield reliable representations of the functional ranges, which would have relied on both negative as well as positive assay controls. So we need to consider another approach that will enable us to make measurements per plate comparable.



```{r muld.def.centerPerPlateTG1}
tgdata <- asinh(data.screen[["data_only"]])[data.screen[["data_ann"]]$accnum == "control", ]
tgplate <- data.screen[["data_ann"]]$plate[data.screen[["data_ann"]]$accnum == "control"]
data.c <- data.screen[["data_only"]]

for(xj in 1:nc.screen(data.screen))
{  
  mtgp <- tapply(tgdata[, xj], INDEX=list(factor(tgplate)), mean)
  mdatap <- NULL
  for(xp in 1:4)
  {
      mdata <- asinh(data.screen[["data_only"]])[data.screen[["data_ann"]]$plate == xp, xj] - mtgp[xp]
      mdatap <- c(mdatap, mdata)
  }
  data.c[, xj] <- mdatap
}
mylimc <- range(data.c)
```

Boxplots of the *TG1*-centered data display smaller plate effects in general, while those for plate 2 of "vehicle" replicates now look relatively larger:

```{r muld.boxplots.logCdata, fig.width=12, fig.height=4}

par(mfrow=c(1, 3))
for(xj in 1:nc.screen(data.screen))
{  
  boxplot(data.c[, xj] ~ factor(data.screen[["data_ann"]]$plate), main=paste(colnames(data.screen[["data_only"]])[xj]),
            col=pdata$cols_list[xj], ylim=mylimc )
  mcont <- data.c[data.screen[["data_ann"]]$accnum =="control", xj]
  mcann <- data.screen[["data_ann"]][data.screen[["data_ann"]]$accnum =="control", ]
  xk <- 1
  for(xi in unique(as.character(mcann$geneID)))
    { 
      points(mcann$plate[mcann$geneID==xi], mcont[mcann$geneID==xi],  
             pch = mypch[xk], col="black", cex=2)
      xk <- xk+1
   }
}
```

We also noticed that the centering seems to be less effective in correcting plate effects when the two *TG1* values display considerable variability, as expected. In addition, there is no guarantee that functional ranges were made comparable as we have no positive controls. We now make a new isqn object with the centered values.

```{r muld.newisqn.data}
data.screen.c <- data.screen
data.screen.c[["data_only"]] <- data.c
```

In spite of the functional ranges not being as comparable, density plots of all values per replicate now display less variability between replicates and between conditions:


```{r muld.plot.dens.log2Data.all, fig.width=12, fig.height=6}
par(mfrow=c(1, 2))
pdensity.column(asinh(data.screen[["data_only"]]), 
                mycols = pdata$pdata$cols_vec, 
                xlim = c(myylim[1], myylim[2]*1.2),
                  myxlab = "asinh-raw values")
pdensity.column(asinh(data.screen.c[["data_only"]]), 
                mycols = pdata$pdata$cols_vec, 
                xlim = c(mylimc[1], mylimc[2]*1.2),
                  myxlab = "plate-centered values")

```

Note that *TG1* controls are now displayed in black to guarantee enough contrast. 
The heavier upper-tail for the "vehicle" replicates arises due to plate 2.

*Colours in the legend of the graph above are wrong*

### Core-set based-quantile normalization

We now select a core set and normalize the data distributions. We select 2/3 of the data values as core set, per replicate, yielding `r round(332*2/3)` measurements.

For this, we will use the measurements we have instead of lethality scores.

```{r muld.lscores}
mann$wtype <- rep("sample", nrow(mann))
lscores.plt <- list(data_only = data.c, data_ann = mann)
class(lscores.plt) <- "isqn.object" 
p.inv.set <- get.inv.set(lscores.plt, var_type = "mad",  prop = 0.67, set_shape = "left")
#colMeans(p.inv.set, na.rm=T)
norm.data <- get.qnorm(data_isqn = lscores.plt, inv_set = p.inv.set)
# Or directly using
#norm.data2 <- get.isqnorm(lscores.plt, var_type = "mad", prop = 0.67, set_shape = "left")
norm7 <- norm.data[["data_only"]]

```

The data densities then become:



```{r muld.plot.dens.rscreenormData, fig.width=8, fig.height=6}
pdensity.column(norm.data[["data_only"]], mycols = pdata[, "vcols"], xlim = mylimc, #c(myllim[1], myllim[2]*1.2),
                  myxlab = "rscreenorm values")

```


## Vignette Info

Note the various macros within the `vignette` section of the metadata block above. These are required in order to instruct R how to build the vignette. Note that you should change the `title` field and the `\VignetteIndexEntry` to match the title of your vignette.

## Styles

The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:

    output: 
      rmarkdown::html_vignette:
        css: mystyles.css

## Figures

The figure sizes have been customised so that you can easily put two images side-by-side. 

```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```

You can enable figure captions by `fig_caption: yes` in YAML:

    output:
      rmarkdown::html_vignette:
        fig_caption: yes

Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.

## More Examples

You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.

```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```

Also a quote using `>`:

> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
