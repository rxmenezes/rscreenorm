pch = mypch[xk], col="black", cex=2)
xk <- xk+1
}
}
par(mfrow=c(1, 3))
for(xj in 1:nc.screen(data.screen))
{
boxplot(data.c[, xj] ~ factor(data.screen[["data_ann"]]$plate), main=paste(colnames(data.screen[["data_only"]])[xj]),
col=pdata$pdata$cols_vec[xj], ylim=mylimc )
mcont <- data.c[data.screen[["data_ann"]]$accnum =="control", xj]
mcann <- data.screen[["data_ann"]][data.screen[["data_ann"]]$accnum =="control", ]
xk <- 1
for(xi in unique(as.character(mcann$geneID)))
{
points(mcann$plate[mcann$geneID==xi], mcont[mcann$geneID==xi],
pch = mypch[xk], col="black", cex=2)
xk <- xk+1
}
}
data.screen.c <- data.screen
data.screen.c[["data_only"]] <- data.c
par(mfrow=c(1, 2))
pdensity.column(asinh(data.screen[["data_only"]]),
mycols = pdata$pdata$cols_vec,
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "asinh-raw values")
pdensity.column(asinh(data.screen.c[["data_only"]]),
mycols = pdata$pdata$cols_vec,
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "plate-centered values")
pdata$pdata
par(mfrow=c(1, 2))
pdensity.column(asinh(data.screen[["data_only"]]),
mycols = as.character(pdata$pdata$cols_vec),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "asinh-raw values")
pdensity.column(asinh(data.screen.c[["data_only"]]),
mycols = as.character(pdata$pdata$cols_vec),
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "plate-centered values")
samples
scr.sam
names
dim(mann)
lscores <- list(data_only = data.c, data_ann = mann, use_plate = FALSE)
class(lscores) <- "rscreen.object"
norm.data <- get.rscreenorm(data_isqn = lscores, var_type = "mad", prop = 0.67, set_shape = "left")
norm.data <- get.rscreenorm(lscores, var_type = "mad", prop = 0.67, set_shape = "left")
dim(mann)
head(mann)
mann$wtype <- rep("sample", nrow(mann))
lscores <- list(data_only = data.c, data_ann = mann, use_plate = FALSE)
class(lscores) <- "rscreen.object"
norm.data <- get.rscreenorm(lscores, var_type = "mad", prop = 0.67, set_shape = "left")
help(pdw)
pdw(norm.data, mycols = as.character(pdata$pdata$cols_vec), myxlab = "rscreenorm values")
par(mfrow=c(1, 2))
pdw(data.screen, mycols = as.character(pdata$pdata$cols_vec), myxlab = "raw values")
pdw(norm.data, mycols = as.character(pdata$pdata$cols_vec), myxlab = "rscreenorm scores")
cols
help("hasWtype")
pdata$pdata
scr.names
library(rscreenorm)
help(match.arg)
dim(data.screen)
class(data.screen)
pdw(data.screen, wtype = "sample", mytitle = "Raw data")
library(rscreenorm)
library(rscreenorm)
class(data.screen)
scr.names(data.screen)
par(mfrow=c(1, 2))
pdensity.column(asinh(scr.data(data.screen)),
mycols = as.character(cols(pdata)),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "asinh-raw values")
pdensity.column(asinh(scr.data(data.screen.c)),
mycols = as.character(cols(pdata)),
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "plate-centered values")
par(mfrow=c(1, 2))
pdensity.column(log2(scr.data(data.screen)),
mycols = as.character(cols(pdata)),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "asinh-raw values")
pdensity.column(log2(scr.data(data.screen.c)),
mycols = as.character(cols(pdata)),
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "plate-centered values")
tgdata <- log2(scr.data(data.screen))[accnum == "control", ]
tgplate <- scr.ann(data.screen)$plate[accnum == "control"]
data.c <- scr.data(data.screen)
for(xj in 1:nc.screen(data.screen))
{
mtgp <- tapply(tgdata[, xj], INDEX=list(factor(tgplate)), mean)
mdatap <- NULL
for(xp in 1:4)
{
mdata <- log2(scr.data(data.screen))[scr.ann(data.screen)$plate == xp, xj] - mtgp[xp]
mdatap <- c(mdatap, mdata)
}
data.c[, xj] <- mdatap
}
mylimc <- range(data.c)
par(mfrow=c(1, 2))
pdensity.column(log2(scr.data(data.screen)),
mycols = as.character(cols(pdata)),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "asinh-raw values")
pdensity.column(log2(scr.data(data.screen.c)),
mycols = as.character(cols(pdata)),
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "plate-centered values")
par(mfrow=c(1, 2))
pdensity.column(log2(scr.data(data.screen)),
mycols = as.character(cols(pdata)),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values")
pdensity.column(scr.data(data.screen.c),
mycols = as.character(cols(pdata)),
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "log2 plate-centered values")
par(mfrow=c(1, 2))
pdensity.column(log2(scr.data(data.screen)),
mycols = as.character(cols(pdata)),
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values")
pdensity.column(scr.data(data.screen.c),
mycols = as.character(cols(pdata)),
xlim = c(mylimc[1], mylimc[2]),
myxlab = "log2 plate-centered values")
pdw(data.screen, mycols = as.character(cols(pdata)), rescale = TRUE, scale.fun = "log2",
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values")
data_rscreen = data.screen
wtype = "sample"
n=512
mycols = as.character(cols(pdata))
na.rm = TRUE
mytitle = paste("Data density", wtype, "wells")
sel.reps = scr.names(data_rscreen),
rescale = TRUE,
scale.fun = "log2"
mytype = "solid"
myxlab = "observed values"
add.leg = TRUE
myleg = NULL
xlim = c(myylim[1], myylim[2]*1.2)
sel.reps = scr.names(data_rscreen),
rescale = TRUE
sel.reps = scr.names(data_rscreen)
if( class(data_rscreen) != "rscreen.object" ){
data_only <- as.matrix(data_rscreen)
data_ann <- data.frame(wtype = rep("sample", nrow(data_only)))
data_rscreen <- list(data_ann = data_ann,
data_only = data_only,
use_plate = FALSE)
}
if(is.numeric(sel.reps)) sel.reps <- scr.names(data_rscreen)[sel.reps]
data_only <- data_rscreen[["data_only"]][, sel.reps, drop = FALSE]
if(rescale) {
scfun <- match.arg(tolower(scale.fun))
if(scfun == "asinh") {
data_only <- asinh(data_only)
} else if(scfun == "log2") {
data_only <- log2(data_only)
}
}
rescale
scale.fun
match.arg(tolower(scale.fun))
match.arg(tolower(scale.fun), choices = c("asinh", "log2"))
pdw
library(rscreenorm)
pdw(data.screen, mycols = as.character(cols(pdata)), rescale = TRUE, scale.fun = "log2",
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values")
points(cols(pdata), pch=20, cex=2)
plot(cols(pdata), pch=20, cex=2)
plot(1:ncol(pdata$pdata) cols(pdata), pch=20, cex=2)
plot(1:ncol(pdata$pdata), cols(pdata), pch=20, cex=2)
cols(pdata = )
plot(1:nrow(pdata$pdata), cols(pdata), pch=20, cex=2)
plot(1:nrow(pdata$pdata), col = cols(pdata), pch=20, cex=2)
pdw(data.screen)
pdmw(data.screen)
names(data.screen)
class(scr.data)
pdw(scr.data)
pdw(scr.data, rescale= T, scale.fun = "asinh")
pdmw(scr.data, rescale=T, scale.fun="asinh")
library(rscreenorm)
library(rscreenorm)
library(rscreenorm)
help(pdw)
q()
library(rscreenorm)
scr.ann
cols
mydir <- getwd()
vcl <- c("HCT116_1", "RPE1")
filesToRead <- paste("readcount-", vcl, "-lib1.gz", sep="")
mydir
mydir <- file.path(mydir, "vignette")
mydir
scr1 <- read.screen.data(mydir = mydir, filename = filesToRead[1],
n_ann_cols = 2, use_plate = FALSE )
dir(mydir)
mydir <- file.path(mydir, "vignettes")
dir(mydir)
mydir
mydir <- getwd()
mydir <- file.path(mydir, "vignettes")
dir(mydir)
scr1 <- read.screen.data(mydir = mydir, filename = filesToRead[1],
n_ann_cols = 2, use_plate = FALSE )
scr2 <- read.screen.data(mydir = mydir, filename = filesToRead[2],
n_ann_cols = 2, use_plate = FALSE )
data.ann.all <- read.delim(file.path(mydir, "annotation_mmc2.txt"), stringsAsFactors=FALSE)
wellType <- rep("sample", nrow(data.ann.all))
tab.target <- table(data.ann.all$Target)
cont.names <- names(tab.target[tab.target>10])
wellType[data.ann.all$Target %in% cont.names[3:5]] <- "neg"
wellType[data.ann.all$Target == "chr10Promiscuous"] <- "pos"
data.ann.all$wtype <- wellType
ann.screen <- sapply(1:nr.screen(scr1), mysplit,
char.vector = as.character(scr1[["data_ann"]]$GENE_CLONE),
split.by = "_", result.sel = 2)
mat.ann <- scr1[["data_ann"]][order(ann.screen), ]
mat.ann$gRNA <- ann.screen[order(ann.screen)]
scr1[["data_only"]] <- scr1[["data_only"]][order(ann.screen), ]
scr2[["data_only"]] <- scr2[["data_only"]][order(ann.screen), ]
scr1[["data_ann"]] <- scr2[["data_ann"]] <- mat.ann
scr1[["data_ann"]]$wtype <- scr2[["data_ann"]]$wtype <- wellType
help(pdw)
library(Mulder2012)
library(gplots)
# Raw data
data(Mulder2012.rawScreenData)
mrd.all <- rawScreenData
# Annotation
data(Mulder2012.rawScreenAnnotation)
mann <- rawScreenAnnotation
mrd <- mrd.all[mrd.all$CHANNEL == "700", ] # Check if this is the channel to be used
wtype <- rep("sample", nrow(mrd))
wtype[mann$ACC.NUMB == "control"] <- rep("pos", sum(mann$ACC.NUMB == "control"))
data.ann <- data.frame(geneID = as.character(mann$SYMBOL),
accnum = mann$ACC.NUMB,
wtype = wtype,
plate = mann$PLATE)
data.screen <- list(data_ann = data.ann, data_only = as.matrix(mrd[, -(1:3)]),
use_plate = TRUE, hasWtype = TRUE)
class(data.screen) <- "rscreen.object"
treat <- colnames(mrd)[seq(from=4, by=3, length.out=5)]
treat <- substr(treat, start=1, stop=nchar(treat)-2)
pdata <- data.frame( names = colnames(mrd)[-(1:3)],
treat = rep(treat, each=3),
replicate = rep(1:3, 5),
cols_vec = var.in.colour(rep(treat, each=3))[[1]])
pdata <- list(pdata = pdata,
cols_list = unique(pdata$cols_vec),
list_vars = colnames(pdata))
pdw(data.screen, wtype = "sample", mytitle = "Raw data", mycols = cols(pdata), lcex=.7 )
vcols <- var.in.colour(pdata[["pdata"]]$treat)[[2]]
# Attribute names to this vector representing the treatment levels
names(vcols) <- var.in.colour(pdata[["pdata"]]$treat)[[3]]
# Make the density plots
accnum <- scr.ann(data.screen)$accnum
tgdata <- log2(scr.data(data.screen))[accnum == "control", ]
tgplate <- scr.ann(data.screen)$plate[accnum == "control"]
data.c <- scr.data(data.screen)
for(xj in 1:nc.screen(data.screen))
{
mtgp <- tapply(tgdata[, xj], INDEX=list(factor(tgplate)), mean)
mdatap <- NULL
for(xp in 1:4)
{
mdata <- log2(scr.data(data.screen))[scr.ann(data.screen)$plate == xp, xj] - mtgp[xp]
mdatap <- c(mdatap, mdata)
}
data.c[, xj] <- mdatap
}
mylimc <- range(data.c)
data.screen.c <- data.screen
data.screen.c[["data_only"]] <- data.c
par(mfrow=c(1, 2), mar = c(5, 3, 5, 1))
pdw(data.screen, mycols = as.character(cols(pdata)), rescale = TRUE, scale.fun = "log2",
xlim = c(myylim[1], myylim[2]*1.2), myxlab = "",
myxlab = "log2-raw values", lcex=.5)
pdw(data.screen.c, mycols = as.character(cols(pdata)), rescale = FALSE,
xlim = c(mylimc[1], mylimc[2]*1.2), myxlab = "",
myxlab = "log2 plate-centered values", lcex=.5)
par(mfrow=c(1, 2), mar = c(5, 3, 5, 1))
pdw(data.screen, mycols = as.character(cols(pdata)), rescale = TRUE, scale.fun = "log2",
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values", lcex=.5)
pdw(data.screen.c, mycols = as.character(cols(pdata)), rescale = FALSE,
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "log2 plate-centered values", lcex=.5)
myylim <- range(log2(scr.data(data.screen)))
par(mfrow=c(1, 2), mar = c(5, 3, 5, 1))
pdw(data.screen, mycols = as.character(cols(pdata)), rescale = TRUE, scale.fun = "log2",
xlim = c(myylim[1], myylim[2]*1.2),
myxlab = "log2-raw values", lcex=.5)
pdw(data.screen.c, mycols = as.character(cols(pdata)), rescale = FALSE,
xlim = c(mylimc[1], mylimc[2]*1.2),
myxlab = "log2 plate-centered values", lcex=.5)
leg.side <- 3
leg.side <- match.arg(tolower(leg.side), c("right", "left"))
leg.side <- "mya"
leg.side <- match.arg(tolower(leg.side), c("right", "left"))
leg.side <- "Right"
leg.side <- match.arg(tolower(leg.side), c("right", "left"))
leg.side
library(rscreenorm)
sessionInfo()
mydata <- cbind(replicate(5, rnorm(500)), replicate(5, rnorm(500, mean=1)))
colnames(mydata) <- paste("Data", 1:10)
data.ann <- data.frame(geneID = paste("G", 1:500), wtype = rep("sample", 500))
data.screen <- list(data_ann = data.ann, data_only = mydata)
class(data.screen) <- "rscreen.object"
pdw(data.screen)
mydata <- cbind(replicate(5, rnorm(500)), replicate(5, rnorm(500, mean=0.5, sd = 2)))
mycont <- rbind(replicate(10, rnorm(100)), replicate(10, rnorm(100, mean=1)))
mydata <- rbind(mydata, mycont)
colnames(mydata) <- paste("Data", 1:10)
data.ann <- data.frame(geneID = paste("G", 1:700),
wtype = c(rep("sample", 500), rep("neg", 100), rep("pos", 100))
data.screen <- list(data_ann = data.ann, data_only = mydata)
data.ann <- data.frame(geneID = paste("G", 1:700),
wtype = c(rep("sample", 500), rep("neg", 100), rep("pos", 100)) )
data.screen <- list(data_ann = data.ann, data_only = mydata)
class(data.screen) <- "rscreen.object"
pdmw(data.screen, lcex = .8)
dim(data.ann)
dim(data_only)
dim(mydata)
names(data.ann)
pdmw(data.screen)
data_rscreen <- data.screen
pdata = NULL
use.wt = c("sample", "pos", "neg")
na.rm = TRUE
sel.reps = scr.names(data_rscreen)
plot = TRUE,
rescale = FALSE
scale.fun = c("asinh", "log2")
myxlab = ""
mytitle = NULL
add.text = FALSE
add.leg = TRUE
lcex = 1
col.types = c("red", "blue")
plot = TRUE
class(data_rscreen)
if(is.numeric(sel.reps)) sel.reps <- colnames(data_rscreen[["data_only"]])[sel.reps]
data_only <- data_rscreen[["data_only"]][, sel.reps, drop = FALSE]
if(rescale) {
scfun <- match.arg(tolower(scale.fun), choices = c("asinh", "log2"))
if(scfun == "asinh") {
data_only <- asinh(data_only)
} else if(scfun == "log2") {
data_only <- log2(data_only)
}
}
if( is.null(pdata) ) {
pdata <- data.frame( names = colnames(data_only),
cols_vec = rainbow(ncol(data_only)) )
pdata <- list(pdata = pdata,
cols_list = unique(pdata$cols_vec),
list_vars = colnames(pdata))
}
mypdata <- list(pdata = pdata[["pdata"]][pdata[["pdata"]]$names %in% sel.reps, ],
cols_list = pdata[["cols_list"]][pdata[["pdata"]]$names %in% sel.reps],
list_vars = pdata[["list_vars"]])
data_ann <- data_rscreen[["data_ann"]]
if( hasWtype(data_rscreen) ){
if(is.null(dim(data_ann))) { wtype_ann <- data_ann[["wtype_ann"]]
} else { wtype_ann <- matrix( rep(data_only[["data_ann"]][, "wtype"],
ncol(data_only) ),
nrow = nrow(data_only),
ncol = ncol(data_only) ) }
} else {
wtype_ann <- matrix("sample", nrow=nr.screen(data_rscreen), ncol=nc.screen(data_rscreen))
}
if( hasWtype(data_rscreen) ){
if(is.null(dim(data_ann))) { wtype_ann <- data_ann[["wtype_ann"]]
} else { wtype_ann <- matrix( rep(data_rscreen[["data_ann"]][, "wtype"],
ncol(data_only) ),
nrow = nrow(data_only),
ncol = ncol(data_only) ) }
} else {
wtype_ann <- matrix("sample", nrow=nr.screen(data_rscreen), ncol=nc.screen(data_rscreen))
}
library(rscreenorm)
mydata <- cbind(replicate(5, rnorm(500)), replicate(5, rnorm(500, mean=0.5, sd = 2)))
mycont <- rbind(replicate(10, rnorm(100)), replicate(10, rnorm(100, mean=1)))
mydata <- rbind(mydata, mycont)
colnames(mydata) <- paste("Data", 1:10)
data.ann <- data.frame(geneID = paste("G", 1:700),
wtype = c(rep("sample", 500), rep("neg", 100), rep("pos", 100)) )
data.screen <- list(data_ann = data.ann, data_only = mydata)
class(data.screen) <- "rscreen.object"
pdmw(data.screen)
library(rscreenorm)
library(rscreenorm)
help("strsplit")
library(rscreenorm)
help(rainbow)
library(grDevices)
library(rscreenorm)
q()
library(rscreenorm)
vignette("rscreenorm")
devtools::build_vignettes()
vignette("rscreenorm")
devtools::build_vignettes()
library(rscreenorm)
library(rscreenorm)
q()
library(rscreenorm)
q()
library(rscreenorm)
?read.screen.data
?get.pdata
setwd("/media/renee/Seagate Expansion Drive/Projects/bachas costa/rscreenorm examples old")
# Define setup
set.seed <- 12345 # 76543
n.clines <- 6     # number of cell lines
nlibrary <- 1000  # number of siRNAs in the library
n.cont <- 200     # number of controls - of negative and positive controls, each
n.reps <- 3        # Number of replicates per cell line (a single condition per cell line)
# Starting parameters of control distributions
mu.neg <- 0
mu.pos <- 1
sd.neg <- 0.1
sd.pos <- sd.neg
# Define parameters library siRNA distributions
par.mat <- c(2, 6)
stretch <- rep( rep(c(0.6, 1, 1.5),2), each=n.reps)
stretch <- stretch + rnorm(length(stretch), mean=0, sd=0.05)
mu.pos <- mu.pos*stretch
pi0 <- 0.8  # prop features with the same mean for all cell lines
# Set means
meanv <- rbeta(nlibrary, shape1=par.mat[1], shape2=par.mat[2]) # means for null features, to be used for all replicates
mean.eff <- rep(0.5, ceiling((1-pi0)*nlibrary))
all.means1 <- matrix( rep(meanv, n.reps*n.clines/2), nrow=nlibrary, ncol=n.reps*n.clines/2 )
all.means2 <- rbind( all.means1[ 1:(nlibrary*pi0), ] ,
matrix(mean.eff, nrow=ceiling((1-pi0)*nlibrary), ncol=n.reps*n.clines/2 ) )
all.means <- cbind(all.means1, all.means2)
# Generate data
data.mat <- matrix(0, nrow=nlibrary+2*n.cont, ncol=n.clines*n.reps)
wt <- c(rep("sample", nlibrary), rep(c("neg","pos"), each=n.cont))
for(xi in 1:(n.clines*n.reps))
{
if(is.null(dim(all.means))) {
data.mat[,xi] <- c(rnorm(nlibrary, mean=all.means, sd=2*sd.neg)*stretch[xi],
rnorm(n.cont, mean=mu.neg, sd=sd.neg),
rnorm(n.cont, mean=mu.pos[xi], sd=sd.pos))
} else {
data.mat[,xi] <- c(rnorm(nlibrary, mean=all.means[,xi], sd=2*sd.neg)*stretch[xi],
rnorm(n.cont, mean=mu.neg, sd=sd.neg),
rnorm(n.cont, mean=mu.pos[xi], sd=sd.pos))
}
}
cline.vec <- rep(1:n.clines, each=n.reps)
cl.reps <- paste( rep(paste("CL", 1:n.clines, sep=""), each=n.reps), rep(paste("R", 1:n.reps, sep=""), n.clines)  )
myp <- rep(c(rep(0.95,3),rep(0.70,3)), each=3)  # proportion of features to include in the invariant set
colnames(data.mat) <- cl.reps
# Make rscreen_object
wtype <- factor(c(rep("sample", nlibrary), rep("neg", n.cont), rep("pos", n.cont)))
data.ann <- data.frame(geneID = paste("Gene", 1:nrow(data.mat), sep=""),
wtype = wtype )
data.screen <- list(data_ann = data.ann,
data_only = data.mat,
use_plate = FALSE)
class(data.screen) <- "rscreen.object"
# Make object to be written out and read in again
data.all <- cbind(data.ann, data.mat)
write.table(data.all, file = "data_all.txt", sep="\t", row.names=F)
## Make pdata
f.cl <- factor(paste( rep(paste("CL",1:n.clines,sep=""),each=n.reps) ))
# Colours to be used for graphs, one corresponding to each cell line
vcols <- c("blue","darkblue","darkolivegreen4","red","deeppink4","violet")
col.cl <- rep(vcols,each=n.reps)
names(col.cl) <- as.character(f.cl)
pdata.df <- data.frame(names = cl.reps, clines = f.cl, treat = rep(0:1, each=n.reps))
pdata.df$cols_vec = var.in.colour(pdata.df$clines)[[1]]
pdata <- list(pdata = pdata.df,
cols_list = unique(pdata.df$cols_vec),
list_vars = colnames(pdata.df))
# Make object to be written out and read in again
write.table(pdata.df, file = "pdata.txt", sep="\t", row.names=F)
scr.data <- read.screen.data(filename = "data_all.txt",
n_ann_cols = 2,
wtype_col = "wtype")
class(scr.data)
names(scr.data)
pdatar <- get.pdata(filename = "pdata.txt")
library(rscreenorm)
scr.data <- read.screen.data(filename = "data_all.txt",
n_ann_cols = 2,
wtype_col = "wtype")
pdatar <- get.pdata(filename = "pdata.txt")
names(pdatar)
library(rscreenorm)
q()
help(dgamma)
myx <- seq(from=0.01, to 10, by =0.01)
myx <- seq(from=0.01, to =10, by =0.01)
plot(myx, dgamma(myx, shape = 4, scale = 0.5))
